const express = require("express");
const axios = require("axios");
const { EMA, RSI, Stochastic, ATR, OBV } = require("technicalindicators");
const app = express();
const PORT = 3000;

const FINAGE_API_KEY = "API_KEY9fUKN2EL3S6FOZ02YR4CE020WRCCPG7I";

class ForexAnalyzer {
  constructor() {
    this.strategies = {
      supportResistance: this.supportResistance,
      fibonacciPullback: this.fibonacciPullback,
      supertrend: this.supertrend,
      orderBlockRetest: this.orderBlockRetest,
      patternCompletion: this.patternCompletion,
      rsiDivergence: this.rsiDivergence,
      emaCrossoverRSI: this.emaCrossoverRSI,
      stochasticOscillator: this.stochasticOscillator,
      obvStrategy: this.obvStrategy,
      volumeSpikeReversal: this.volumeSpikeReversal,
      averageSessionVolatility: this.averageSessionVolatility,
    };
  }

  async getForexData(symbol, interval) {
    const toDate = new Date();
    const fromDate = new Date();

    const intervalConfig = {
      "1min": [1, "1/minute"],
      "2min": [1, "2/minute"],
      "3min": [1, "3/minute"],
      "5min": [2, "5/minute"],
      "15min": [3, "15/minute"],
      "30min": [5, "30/minute"],
    };

    const [daysNeeded, apiInterval] = intervalConfig[interval] || [30, "1/day"];
    fromDate.setDate(toDate.getDate() - daysNeeded);

    const formatDate = (date) => date.toISOString().split("T")[0];
    const url = `https://api.finage.co.uk/agg/forex/${symbol}/${apiInterval}/${formatDate(
      fromDate
    )}/2025-07-20?apikey=${FINAGE_API_KEY}&limit=5000`;

    try {
      console.log("url", url);
      const response = await axios.get(url);

      return (
        response.data.results?.map((r) => ({
          open: r.o,
          high: r.h,
          low: r.l,
          close: r.c,
          volume: r.v,
          timestamp: r.t,
        })) || []
      );
    } catch (error) {
      console.error("Finage API error:", error.response?.data);
      return [];
    }
  }

  averageSessionVolatility(data, sessionMinutes = 60, lookbackSessions = 5) {
    if (data.length < sessionMinutes * (lookbackSessions + 1)) return "hold";
    // Find most recent session's bars
    const lastSession = data.slice(-sessionMinutes);

    // Calculate high-low range for the most recent session
    const sessionHigh = Math.max(...lastSession.map((d) => d.high));
    const sessionLow = Math.min(...lastSession.map((d) => d.low));
    const lastSessionRange = sessionHigh - sessionLow;

    // Calculate average range for previous sessions
    let ranges = [];
    for (let i = 1; i <= lookbackSessions; i++) {
      const session = data.slice(
        -sessionMinutes * (i + 1),
        -sessionMinutes * i
      );
      if (session.length === 0) continue;
      const high = Math.max(...session.map((d) => d.high));
      const low = Math.min(...session.map((d) => d.low));
      ranges.push(high - low);
    }
    if (ranges.length < lookbackSessions) return "hold";

    const avgRange = ranges.reduce((a, b) => a + b, 0) / ranges.length;

    // Trading logic based on volatility expansion/contraction
    // **High volatility breakout signal**
    if (lastSessionRange > 1.3 * avgRange) {
      // If price is also breaking out upward in last few bars
      if (lastSession[lastSession.length - 1].close > sessionHigh * 0.98)
        return "buy";
      if (lastSession[lastSession.length - 1].close < sessionLow * 1.02)
        return "sell";
    }

    // **Volatility contraction (range is much tighter than average) - prepare for breakout soon**
    if (lastSessionRange < 0.7 * avgRange) {
      return "hold";
    }

    return "hold";
  }

  volumeSpikeReversal(data) {
    if (data.length < 6) return "hold";
    const vols = data.slice(-6).map((d) => d.volume);
    const avgVol = vols.slice(0, 5).reduce((a, b) => a + b, 0) / 5;
    const last = data[data.length - 1];
    if (last.volume > avgVol * 2) {
      const body = Math.abs(last.close - last.open);
      const total = last.high - last.low;
      const ratio = body / total;
      // Bullish spike reversal
      if (
        ratio < 0.3 &&
        last.close > (last.high + last.low) / 2 &&
        last.close > last.open
      )
        return "buy";
      // Bearish spike reversal
      if (
        ratio < 0.3 &&
        last.close < (last.high + last.low) / 2 &&
        last.close < last.open
      )
        return "sell";
    }
    return "hold";
  }

  obvStrategy(data) {
    const closes = data.map((d) => d.close);
    const volumes = data.map((d) => d.volume);
    const obv = OBV.calculate({ close: closes, volume: volumes });
    if (obv.length < 2) return "hold";
    const lastObv = obv[obv.length - 1];
    const prevObv = obv[obv.length - 2];
    if (
      lastObv > prevObv &&
      closes[closes.length - 1] > closes[closes.length - 2]
    )
      return "buy";
    if (
      lastObv < prevObv &&
      closes[closes.length - 1] < closes[closes.length - 2]
    )
      return "sell";
    return "hold";
  }

  // OPTIMIZED STRATEGIES FOR 1-3 MINUTE TRADING
  supportResistance(data) {
    const lookback = 3; // Reduced from 5
    const swingPoints = this.findSwingPoints(data, lookback);
    if (!swingPoints.length) return "hold";

    const last = data[data.length - 1];
    const tolerance = 0.0005; // Tighter tolerance (0.05%)

    // Support levels (last 3 lows)
    const supportLevels = swingPoints
      .filter((p) => p.type === "low")
      .slice(-3)
      .map((p) => p.price);

    // Resistance levels (last 3 highs)
    const resistanceLevels = swingPoints
      .filter((p) => p.type === "high")
      .slice(-3)
      .map((p) => p.price);

    // Check support bounce with volume confirmation
    const nearSupport = supportLevels.some(
      (level) => Math.abs(last.low - level) / level < tolerance
    );

    // Check resistance rejection with volume confirmation
    const nearResistance = resistanceLevels.some(
      (level) => Math.abs(last.high - level) / level < tolerance
    );

    // Immediate price action confirmation
    if (
      nearSupport &&
      last.close > last.open &&
      last.volume > data[data.length - 2].volume
    )
      return "buy";

    if (
      nearResistance &&
      last.close < last.open &&
      last.volume > data[data.length - 2].volume
    )
      return "sell";

    return "hold";
  }

  fibonacciPullback(data) {
    const swingPoints = this.findSwingPoints(data, 3); // Reduced lookback
    if (swingPoints.length < 2) return "hold";

    // Last significant swing high and low
    const highs = swingPoints.filter((p) => p.type === "high").slice(-2);
    const lows = swingPoints.filter((p) => p.type === "low").slice(-2);

    if (highs.length < 1 || lows.length < 1) return "hold";

    const lastHigh = Math.max(...highs.map((h) => h.price));
    const lastLow = Math.min(...lows.map((l) => l.price));
    const range = lastHigh - lastLow;

    // Key Fibonacci levels for short-term trading
    const fibLevels = {
      level38: lastHigh - range * 0.382,
      level50: lastHigh - range * 0.5,
      level61: lastHigh - range * 0.618,
    };

    const last = data[data.length - 1];
    const tolerance = 0.0005; // Tighter tolerance (0.05%)

    // Check if price is near a fib level with confirmation
    for (const level of Object.values(fibLevels)) {
      if (Math.abs(last.close - level) / level < tolerance) {
        // Bullish reversal confirmation
        if (last.close > last.open && last.close > (last.high + last.low) / 2)
          return "buy";

        // Bearish reversal confirmation
        if (last.close < last.open && last.close < (last.high + last.low) / 2)
          return "sell";
      }
    }

    return "hold";
  }

  supertrend(data) {
    // Optimized for short-term: smaller periods
    const period = 5; // Reduced from 10
    const multiplier = 2.0; // More sensitive

    if (data.length < period) return "hold";

    const highs = data.map((d) => d.high);
    const lows = data.map((d) => d.low);
    const closes = data.map((d) => d.close);

    // Calculate ATR
    const atr = ATR.calculate({
      period,
      high: highs,
      low: lows,
      close: closes,
    });

    if (atr.length < 1) return "hold";

    const lastIdx = data.length - 1;
    const lastAtr = atr[atr.length - 1];
    const prevClose = data[lastIdx - 1].close;

    // Calculate basic bands
    const mid = (highs[lastIdx] + lows[lastIdx]) / 2;
    const upper = mid + multiplier * lastAtr;
    const lower = mid - multiplier * lastAtr;

    // Determine trend with immediate confirmation
    if (closes[lastIdx] > upper && closes[lastIdx] > prevClose) return "buy";

    if (closes[lastIdx] < lower && closes[lastIdx] < prevClose) return "sell";

    return "hold";
  }

  findConsolidationZones(data, minPeriod) {
    const zones = [];
    let startIdx = 0;

    for (let i = 1; i < data.length; i++) {
      const range =
        Math.max(data[i].high, data[i - 1].high) -
        Math.min(data[i].low, data[i - 1].low);
      const avgRange =
        (data[i].high - data[i].low + data[i - 1].high - data[i - 1].low) / 2;

      // Consolidation if range is less than 1.5x average range
      if (range < avgRange * 1.5) {
        if (startIdx === 0) startIdx = i - 1;
      } else {
        if (startIdx > 0 && i - startIdx >= minPeriod) {
          const zoneHigh = Math.max(
            ...data.slice(startIdx, i).map((d) => d.high)
          );
          const zoneLow = Math.min(
            ...data.slice(startIdx, i).map((d) => d.low)
          );
          zones.push({
            start: startIdx,
            end: i - 1,
            high: zoneHigh,
            low: zoneLow,
            mid: (zoneHigh + zoneLow) / 2,
          });
        }
        startIdx = 0;
      }
    }
    return zones;
  }

  orderBlockRetest(data) {
    // More sensitive consolidation detection
    const blocks = this.findConsolidationZones(data, 2); // Reduced min period
    if (!blocks.length) return "hold";

    const last = data[data.length - 1];
    const prev = data[data.length - 2];

    // Only check recent blocks (last 2)
    for (const block of blocks.slice(-2)) {
      const inBlock = last.low <= block.high && last.high >= block.low;

      if (!inBlock) continue;

      // Bullish retest confirmation
      if (last.close > block.mid && last.close > prev.close) return "buy";

      // Bearish retest confirmation
      if (last.close < block.mid && last.close < prev.close) return "sell";
    }

    return "hold";
  }

  patternCompletion(data) {
    // Focus on short-term patterns only
    if (data.length < 5) return "hold";

    // 1. Pin Bar detection
    const last = data[data.length - 1];
    const bodySize = Math.abs(last.open - last.close);
    const totalRange = last.high - last.low;
    const bodyRatio = bodySize / totalRange;

    // Bullish pin bar
    if (bodyRatio < 0.3 && last.close > (last.high + last.low) / 2)
      return "buy";

    // Bearish pin bar
    if (bodyRatio < 0.3 && last.close < (last.high + last.low) / 2)
      return "sell";

    // 2. Inside Bar detection
    const prev = data[data.length - 2];
    if (last.high < prev.high && last.low > prev.low) {
      // Breakout confirmation
      if (last.close > prev.high) return "buy";
      if (last.close < prev.low) return "sell";
    }

    return "hold";
  }

  rsiDivergence(data) {
    const closes = data.map((d) => d.close);

    // Shorter period for faster response
    const rsi = RSI.calculate({ period: 10, values: closes }); // Reduced from 14

    if (rsi.length < 10) return "hold";

    // Only check last 2 peaks/valleys
    const priceValleys = this.findValleys(closes, 2);
    const rsiValleys = this.findValleys(rsi, 2);
    const pricePeaks = this.findPeaks(closes, 2);
    const rsiPeaks = this.findPeaks(rsi, 2);

    // Bullish divergence
    if (priceValleys.length >= 2 && rsiValleys.length >= 2) {
      const lastPrice = priceValleys[priceValleys.length - 1].value;
      const prevPrice = priceValleys[priceValleys.length - 2].value;
      const lastRsi = rsiValleys[rsiValleys.length - 1].value;
      const prevRsi = rsiValleys[rsiValleys.length - 2].value;

      if (lastPrice < prevPrice && lastRsi > prevRsi) return "buy";
    }

    // Bearish divergence
    if (pricePeaks.length >= 2 && rsiPeaks.length >= 2) {
      const lastPrice = pricePeaks[pricePeaks.length - 1].value;
      const prevPrice = pricePeaks[pricePeaks.length - 2].value;
      const lastRsi = rsiPeaks[rsiPeaks.length - 1].value;
      const prevRsi = rsiPeaks[rsiPeaks.length - 2].value;

      if (lastPrice > prevPrice && lastRsi < prevRsi) return "sell";
    }

    return "hold";
  }

  emaCrossoverRSI(data) {
    const closes = data.map((d) => d.close);

    // Faster EMAs
    const ema5 = EMA.calculate({ period: 5, values: closes });
    const ema10 = EMA.calculate({ period: 10, values: closes });
    const rsi = RSI.calculate({ period: 8, values: closes }); // Faster RSI

    const lastIdx = data.length - 1;
    const prevIdx = lastIdx - 1;

    if (lastIdx < 10 || !ema5[lastIdx] || !ema10[lastIdx] || !rsi[lastIdx])
      return "hold";

    const emaCrossUp =
      ema5[prevIdx] <= ema10[prevIdx] && ema5[lastIdx] > ema10[lastIdx];
    const emaCrossDown =
      ema5[prevIdx] >= ema10[prevIdx] && ema5[lastIdx] < ema10[lastIdx];

    // More sensitive RSI thresholds
    if (emaCrossUp && rsi[lastIdx] < 35) return "buy";
    if (emaCrossDown && rsi[lastIdx] > 65) return "sell";

    return "hold";
  }

  stochasticOscillator(data) {
    const closes = data.map((d) => d.close);
    const highs = data.map((d) => d.high);
    const lows = data.map((d) => d.low);

    // Faster stochastic
    const sto = Stochastic.calculate({
      high: highs,
      low: lows,
      close: closes,
      period: 10, // Reduced from 14
      signalPeriod: 2,
    });

    const lastIdx = data.length - 1;
    if (lastIdx < 10 || !sto[lastIdx]) return "hold";

    const k = sto[lastIdx].k;
    const d = sto[lastIdx].d;
    const prevK = sto[lastIdx - 1]?.k;
    const prevD = sto[lastIdx - 1]?.d;

    const kCrossUp = prevK < prevD && k > d;
    const kCrossDown = prevK > prevD && k < d;

    // More sensitive thresholds
    return kCrossUp && k < 25 ? "buy" : kCrossDown && k > 75 ? "sell" : "hold";
  }

  findSwingPoints(data, lookback) {
    const swingPoints = [];
    for (let i = lookback; i < data.length - lookback; i++) {
      // Check for swing high
      let isHigh = true;
      for (let j = i - lookback; j <= i + lookback; j++) {
        if (j === i) continue;
        if (data[j].high > data[i].high) {
          isHigh = false;
          break;
        }
      }
      if (isHigh) {
        swingPoints.push({
          index: i,
          price: data[i].high,
          type: "high",
        });
      }

      // Check for swing low
      let isLow = true;
      for (let j = i - lookback; j <= i + lookback; j++) {
        if (j === i) continue;
        if (data[j].low < data[i].low) {
          isLow = false;
          break;
        }
      }
      if (isLow) {
        swingPoints.push({
          index: i,
          price: data[i].low,
          type: "low",
        });
      }
    }
    return swingPoints;
  }

  findConsolidationZones(data, minPeriod) {
    const zones = [];
    let startIdx = 0;

    for (let i = 1; i < data.length; i++) {
      const range =
        Math.max(data[i].high, data[i - 1].high) -
        Math.min(data[i].low, data[i - 1].low);
      const avgRange =
        (data[i].high - data[i].low + data[i - 1].high - data[i - 1].low) / 2;

      // Consolidation if range is less than 1.5x average range
      if (range < avgRange * 1.5) {
        if (startIdx === 0) startIdx = i - 1;
      } else {
        if (startIdx > 0 && i - startIdx >= minPeriod) {
          const zoneHigh = Math.max(
            ...data.slice(startIdx, i).map((d) => d.high)
          );
          const zoneLow = Math.min(
            ...data.slice(startIdx, i).map((d) => d.low)
          );
          zones.push({
            start: startIdx,
            end: i - 1,
            high: zoneHigh,
            low: zoneLow,
            mid: (zoneHigh + zoneLow) / 2,
          });
        }
        startIdx = 0;
      }
    }
    return zones;
  }

  findPeaks(values, lookback) {
    const peaks = [];
    for (let i = lookback; i < values.length - lookback; i++) {
      let isPeak = true;
      for (let j = i - lookback; j <= i + lookback; j++) {
        if (j === i) continue;
        if (values[j] > values[i]) {
          isPeak = false;
          break;
        }
      }
      if (isPeak) {
        peaks.push({ index: i, value: values[i] });
      }
    }
    return peaks;
  }

  findValleys(values, lookback) {
    const valleys = [];
    for (let i = lookback; i < values.length - lookback; i++) {
      let isValley = true;
      for (let j = i - lookback; j <= i + lookback; j++) {
        if (j === i) continue;
        if (values[j] < values[i]) {
          isValley = false;
          break;
        }
      }
      if (isValley) {
        valleys.push({ index: i, value: values[i] });
      }
    }
    return valleys;
  }

  detectHeadShoulders(data) {
    // Simplified Head and Shoulders detection
    const swingPoints = this.findSwingPoints(data, 3);
    const highs = swingPoints.filter((p) => p.type === "high");

    if (highs.length < 3) return null;

    const leftShoulder = highs[highs.length - 3];
    const head = highs[highs.length - 2];
    const rightShoulder = highs[highs.length - 1];

    // Validate pattern
    if (
      head.price > leftShoulder.price &&
      head.price > rightShoulder.price &&
      Math.abs(leftShoulder.price - rightShoulder.price) /
        ((leftShoulder.price + rightShoulder.price) / 2) <
        0.01
    ) {
      return "bearish";
    }

    // Inverse Head and Shoulders
    const lows = swingPoints.filter((p) => p.type === "low");
    if (lows.length < 3) return null;

    const leftShoulderLow = lows[lows.length - 3];
    const headLow = lows[lows.length - 2];
    const rightShoulderLow = lows[lows.length - 1];

    if (
      headLow.price < leftShoulderLow.price &&
      headLow.price < rightShoulderLow.price &&
      Math.abs(leftShoulderLow.price - rightShoulderLow.price) /
        ((leftShoulderLow.price + rightShoulderLow.price) / 2) <
        0.01
    ) {
      return "bullish";
    }

    return null;
  }

  detectWedge(data) {
    // Detect rising/falling wedges
    if (data.length < 10) return null;

    // Get trendlines for highs and lows
    const recentHighs = data.slice(-10).map((d) => d.high);
    const recentLows = data.slice(-10).map((d) => d.low);

    const highSlope = this.calculateSlope(recentHighs);
    const lowSlope = this.calculateSlope(recentLows);

    // Rising wedge: highs rising slowly, lows rising faster
    if (highSlope > 0 && lowSlope > 0 && lowSlope > highSlope) {
      return "rising";
    }
    // Falling wedge: highs falling faster, lows falling slowly
    if (highSlope < 0 && lowSlope < 0 && highSlope < lowSlope) {
      return "falling";
    }
    return null;
  }

  calculateSlope(values) {
    const x = Array.from({ length: values.length }, (_, i) => i);
    const y = values;

    const n = x.length;
    const sumX = x.reduce((a, b) => a + b, 0);
    const sumY = y.reduce((a, b) => a + b, 0);
    const sumXY = x.map((xi, i) => xi * y[i]).reduce((a, b) => a + b, 0);
    const sumXX = x.map((xi) => xi * xi).reduce((a, b) => a + b, 0);

    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
    return slope;
  }

  async analyze(symbol, interval) {
    const data = await this.getForexData(symbol, interval);

    // Reduced minimum data requirement
    if (!data || data.length < 15) {
      throw new Error("Insufficient data for analysis");
    }

    const results = {};
    let buyCount = 0;
    let sellCount = 0;

    // Run only our optimized strategies
    for (const [name, strategy] of Object.entries(this.strategies)) {
      try {
        results[name] = strategy.call(this, data);
        if (results[name] === "buy") buyCount++;
        if (results[name] === "sell") sellCount++;
      } catch (err) {
        console.error(`Error in ${name} strategy:`, err);
        results[name] = "error";
      }
    }

    // Simple majority vote consensus
    let consensus = "hold";
    if (buyCount >= 3) consensus = "buy";
    if (sellCount >= 3) consensus = "sell";

    return {
      symbol,
      interval,
      strategies: results,
      consensus,
      counts: { buy: buyCount, sell: sellCount },
    };
  }
}

// Express Routes
app.get("/analyze/:symbol", async (req, res) => {
  try {
    const { symbol } = req.params;
    const interval = req.query.interval || "1day";
    const analyzer = new ForexAnalyzer();
    const analysis = await analyzer.analyze(symbol, interval);
    res.json(analysis);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Add this route after your existing routes
app.get("/analyze-olym", async (req, res) => {
  try {
    const interval = req.query.interval || "5min";
    const symbols = req.query.symbols
      ? req.query.symbols.split(",")
      : [
          "USDJPY",
          "USDCAD",
          "AUDUSD",
          "EURCAD",
          "EURAUD",
          "EURJPY",
          "GBPJPY",
          "AUDJPY",
          "GBPCAD",
          "GBPAUD",
          "AUDCAD",
          "CADJPY",
        ];

    const analyzer = new ForexAnalyzer();
    const results = [];

    for (const symbol of symbols) {
      try {
        const analysis = await analyzer.analyze(symbol, interval);
        results.push({
          pair: symbol,
          consensus: analysis.consensus,
          buySignals: analysis.counts.buy,
          sellSignals: analysis.counts.sell,
          totalStrategies: Object.keys(analysis.strategies).length,
          details: analysis.strategies,
        });
      } catch (error) {
        results.push({
          pair: symbol,
          error: error.message,
        });
      }
    }

    res.json({
      interval,
      analysisDate: new Date().toISOString(),
      pairsAnalyzed: results.length,
      results,
    });
  } catch (error) {
    res.status(500).json({ error: "Server error: " + error.message });
  }
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
